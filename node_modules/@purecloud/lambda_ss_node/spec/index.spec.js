var assert = require('assert');
var proxyquire = require('proxyquire');

describe('Lambda Secret Stash Function', function() {
    process.env.AWS_REGION = 'us-east-1';
    this.timeout(10000);
    var ss;

    it('should return -1 when the value is not present', function(done) {
        ss = require('../index.js');

        ss.decrypt("secret_stash/dev/all/test_json").then(function(secret){
            done();
        }).catch(function(error){
            console.log(error);
            assert.fail(null, null, "Promise should have resolved");
        })
    });

    describe('retry logic', function () {
        beforeEach(function () {
            var AWS = {
                S3: function () {
                    return {
                        getObject: function () {
                            // do nothing, to trigger the timeout and retry
                        }
                    }
                }
            };

            ss = proxyquire('../index.js', {
                'aws-sdk': AWS
            });
        });

        it('should try five times, then reject', function (done) {
            ss.decrypt("secret_stash/dev/all/test_json").then(function(){
                assert.fail(null, null, 'Promise should have rejected');
            }).catch(function(err){
                console.log(err);
                done();
            });
        });

        it('should allow configuration of max tries and timeout', function (done) {
            ss.decrypt("secret_stash/dev/all/test_json", { max_tries: 3, timeout: 250 }).then(function(){
                assert.fail(null, null, 'Promise should have rejected');
            }).catch(function(err){
                console.log(err);
                done();
            });
        });

        it('should allow configuration of max tries only', function (done) {
            ss.decrypt("secret_stash/dev/all/test_json", { max_tries: 3 }).then(function(){
                assert.fail(null, null, 'Promise should have rejected');
            }).catch(function(err){
                console.log(err);
                done();
            });
        });

        it('should allow configuration of timeout only', function (done) {
            ss.decrypt("secret_stash/dev/all/test_json", { timeout: 500 }).then(function(){
                assert.fail(null, null, 'Promise should have rejected');
            }).catch(function(err){
                console.log(err);
                done();
            });
        });
    });
});
