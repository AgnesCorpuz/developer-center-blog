"use strict";

const AWS = require('aws-sdk');
const aes = require('./lib/aes');
const parser = require('./lib/parser');
const Promise = require('bluebird');
const harness = require('bluebird-harness');

let bucketMap = {
    'us-east-1': 'inin-kms-secured-data',
    'ap-southeast-2': 'inin-kms-secured-data-apse2',
    'eu-west-1': 'inin-kms-secured-data-euw1',
    'ap-northeast-1': 'inin-kms-secured-data-apne1'
};

let s3bucket = bucketMap[process.env.AWS_REGION];

let kms = new AWS.KMS({region: process.env.AWS_REGION});
var s3 = new AWS.S3({region: process.env.AWS_REGION});


function getFromS3(s3key, errorCallback, resultCallback){
    try {
        s3.getObject({
            Bucket: s3bucket,
            Key: s3key
        }, function (err, data) {
            if (err) {
                errorCallback(err);
            }
            else {
                var context = {
                    'group': data['Metadata']['group'],
                    'path': s3key,
                    'region': data['Metadata']['region'],
                    'account': data['Metadata']['account']
                };

                resultCallback({
                    'content': data['Body'],
                    'encoded_key': data['Metadata']['key'],
                    'iv': data['Metadata']['iv'],
                    'context': context
                });
            }
        });
    } catch (e) {
        errorCallback(e);
    }
}

module.exports = {
    decrypt: function(s3key, options){
        var promiseFn = function () {
            return new Promise(function (resolve, reject) {
                getFromS3(s3key, reject, function (cipher_data) {
                    try {
                        var context = cipher_data['context'];
                        var iv = new Buffer(cipher_data['iv'], "base64");

                        var params = {
                            CiphertextBlob: new Buffer(cipher_data['encoded_key'], "base64"),
                            EncryptionContext: context
                        };

                        kms.decrypt(params, function (err, data) {
                            if (err) {
                                reject(err);
                            }
                            else if (data) {
                                var decryption_key = data['Plaintext'];
                                let base64Decoded = new Buffer(cipher_data['content'].toString(), 'base64');
                                var decrypted = aes.decrypt(decryption_key, iv, base64Decoded);

                                resolve(parser.parse(decrypted));
                            }
                        });
                    } catch (e) {
                        reject(e);
                    }
                });
            });
        };

        var max_tries = 5, timeout = 1000;
        if (options) {
            max_tries = options.max_tries || max_tries;
            timeout = options.timeout || timeout;
        }

        // return promiseFn().timeout(timeout);
        return harness({ attempt: max_tries, timeout: timeout })
            .go(promiseFn);
    }
};
